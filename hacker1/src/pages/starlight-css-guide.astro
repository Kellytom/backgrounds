---
import Layout from '../layouts/MDXLayout.astro';

const frontmatter = {
  title: "Starlight CSS Guide",
  description: "Complete guide to customizing Starlight with CSS, including theme variables, component styling, and advanced customization techniques."
};
---

<Layout {...frontmatter}>

# Starlight CSS Customization Guide

This comprehensive guide covers how to customize **Starlight** with CSS, including theme variables, component overrides, and advanced styling techniques used in the **Hacker1** project.

## CSS Architecture

Starlight uses a layered CSS architecture that allows for flexible customization:

```
1. Base Starlight Styles (Framework)
2. Theme Variables (Colors, fonts, spacing)
3. Component Styles (Sidebar, navigation, cards)
4. Custom Overrides (Your project-specific styles)
```

## Theme Variables

Starlight provides a comprehensive set of CSS custom properties (variables) that you can override to customize the appearance of your site:

```css
/* In your global.css */
:root {
  /* Base colors */
  --sl-color-accent: #00aeff;
  --sl-color-accent-high: #5ac8ff;
  --sl-color-accent-low: #0075af;
  
  /* Font settings */
  --sl-font: 'Inter', system-ui, sans-serif;
  --sl-font-mono: 'JetBrains Mono', monospace;
  
  /* Content width */
  --sl-content-width: 50rem;
  --sl-content-padding: 1rem;
}
```

## Dark Mode Customization

Starlight has built-in dark mode support. You can customize the dark theme variables:

```css
/* Dark mode overrides */
:root[data-theme="dark"] {
  --sl-color-accent: #5ac8ff;
  --sl-color-accent-high: #b0e6ff;
  --sl-color-accent-low: #0075af;
  
  --sl-color-text: #f0f0f0;
  --sl-color-bg: #0e1117;
}
```

## Component Styling

### Navigation Bar

Customizing the Starlight navigation:

```css
/* Header and navigation styling */
.sl-header {
  background: rgba(22, 22, 26, 0.8);
  backdrop-filter: blur(10px);
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.sl-navigation {
  font-weight: 500;
}

.sl-navigation a {
  transition: color 0.2s, background-color 0.2s;
}

.sl-navigation a:hover {
  color: var(--sl-color-accent-high);
  background-color: rgba(255, 255, 255, 0.05);
}
```

### Sidebar Customization

```css
/* Sidebar styling */
.sl-sidebar {
  background: rgba(22, 22, 26, 0.7);
  backdrop-filter: blur(10px);
  border-right: 1px solid rgba(255, 255, 255, 0.1);
}

.sl-sidebar h2 {
  font-weight: 600;
  letter-spacing: 0.03em;
}

.sl-sidebar-item {
  border-radius: 6px;
  transition: background-color 0.2s, color 0.2s;
}

.sl-sidebar-item:hover {
  background-color: rgba(255, 255, 255, 0.05);
}

.sl-sidebar-item[aria-current="page"] {
  background-color: var(--sl-color-accent-low);
  color: white;
}
```

## Advanced Techniques

### Global CSS Injection

You can add global styles by creating a `src/styles/global.css` file and importing it in your Astro config:

```js
// astro.config.mjs
export default defineConfig({
  integrations: [
    starlight({
      title: 'My Docs',
      customCss: [
        // Relative path to your custom CSS file
        './src/styles/global.css',
      ],
    }),
  ],
});
```

### Component Overrides

You can override Starlight's built-in components by creating your own versions in `src/components/starlight/`:

```jsx
// src/components/starlight/Head.astro
---
import Default from 'astro-starlight/components/Head.astro';
---

<!-- Add custom meta tags -->
<meta name="theme-color" content="#0e1117" />
<Default {...Astro.props} />
```

### Using CSS Frameworks with Starlight

You can integrate CSS frameworks like Tailwind or Bulma with Starlight:

```js
// astro.config.mjs
import starlight from '@astrojs/starlight';
import tailwind from '@astrojs/tailwind';

export default defineConfig({
  integrations: [
    starlight({
      title: 'My Docs',
    }),
    tailwind(),
  ],
});
```

## Best Practices for Hacker1

- Maintain a consistent color scheme that works in both light and dark modes
- Use variables for all theme-related values for easy global updates
- Keep accessibility in mind (sufficient contrast, focus states)
- Test all custom styles in multiple browsers and devices
- Consider using CSS custom properties for dynamic theming

## Resources

- [Starlight CSS Variables Reference](https://starlight.astro.build/reference/configuration/#css-variables)
- [Starlight Component Customization](https://starlight.astro.build/guides/customization/)
- [Astro CSS and Styling Guide](https://docs.astro.build/en/guides/styling/)
